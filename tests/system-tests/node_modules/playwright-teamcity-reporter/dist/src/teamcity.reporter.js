"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TeamcityReporter_instances, _a, _TeamcityReporter_TZ_OFFSET, _TeamcityReporter_testMetadataArtifacts, _TeamcityReporter_config, _TeamcityReporter_mode, _TeamcityReporter_lastRunningSuite, _TeamcityReporter_logSuiteResults, _TeamcityReporter_logTestResults, _TeamcityReporter_logResult;
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const errors_1 = require("./errors");
const teamcity_model_1 = require("./teamcity.model");
const utils_1 = require("./utils");
// https://www.jetbrains.com/help/teamcity/service-messages.html
class TeamcityReporter {
    constructor(configuration) {
        this.configuration = configuration;
        _TeamcityReporter_instances.add(this);
        _TeamcityReporter_testMetadataArtifacts.set(this, void 0);
        _TeamcityReporter_config.set(this, void 0);
        _TeamcityReporter_mode.set(this, void 0);
        _TeamcityReporter_lastRunningSuite.set(this, void 0);
        __classPrivateFieldSet(this, _TeamcityReporter_testMetadataArtifacts, configuration?.testMetadataArtifacts
            ?? process.env.TEAMCITY_ARTIFACTS_PW_RESULT
            ?? 'test-results', "f");
    }
    onBegin(config, suite) {
        this.flowId = process.pid.toString();
        __classPrivateFieldSet(this, _TeamcityReporter_config, config, "f");
        this.rootSuite = suite;
        if (config.workers === 1) {
            __classPrivateFieldSet(this, _TeamcityReporter_mode, teamcity_model_1.ReporterMode.Test, "f");
        }
        else {
            console.info('Playwright is running suites in multiple workers. The results will be reported after all of them finish.');
            __classPrivateFieldSet(this, _TeamcityReporter_mode, teamcity_model_1.ReporterMode.Suite, "f");
        }
        if (this.configuration?.logConfig) {
            this.logToTC(`message`, [`text='${TeamcityReporter.escape((0, utils_1.stringify)(__classPrivateFieldGet(this, _TeamcityReporter_config, "f")))}'`]);
        }
        // https://www.jetbrains.com/help/teamcity/service-messages.html#Enabling+Test+Retry
        if (__classPrivateFieldGet(this, _TeamcityReporter_config, "f").projects.some(project => project.retries > 0)) {
            this.logToTC(`testRetrySupport`, [`enabled='true'`]);
        }
    }
    onError(error) {
        console.error(error);
    }
    onTestBegin(test) {
        if (__classPrivateFieldGet(this, _TeamcityReporter_mode, "f") === teamcity_model_1.ReporterMode.Test) {
            let parentSuite = test.parent;
            while (parentSuite?.parent?.parent !== this.rootSuite && parentSuite.parent) {
                parentSuite = parentSuite.parent;
            }
            if (parentSuite !== __classPrivateFieldGet(this, _TeamcityReporter_lastRunningSuite, "f")) {
                if (__classPrivateFieldGet(this, _TeamcityReporter_lastRunningSuite, "f") !== undefined) {
                    __classPrivateFieldGet(this, _TeamcityReporter_instances, "m", _TeamcityReporter_logSuiteResults).call(this, __classPrivateFieldGet(this, _TeamcityReporter_lastRunningSuite, "f"));
                }
                __classPrivateFieldSet(this, _TeamcityReporter_lastRunningSuite, parentSuite, "f");
            }
        }
    }
    onEnd(result) {
        switch (__classPrivateFieldGet(this, _TeamcityReporter_mode, "f")) {
            case teamcity_model_1.ReporterMode.Test:
                if (__classPrivateFieldGet(this, _TeamcityReporter_lastRunningSuite, "f") !== undefined) {
                    __classPrivateFieldGet(this, _TeamcityReporter_instances, "m", _TeamcityReporter_logSuiteResults).call(this, __classPrivateFieldGet(this, _TeamcityReporter_lastRunningSuite, "f"));
                }
                break;
            case teamcity_model_1.ReporterMode.Suite:
            default:
                // @TODO try this
                // https://www.jetbrains.com/help/teamcity/2021.2/service-messages.html#Importing+XML+Reports
                // console.log(`##teamcity[importData type='junit' path='test-results.xml']`);
                this.rootSuite.suites
                    .flatMap(fileSuite => fileSuite.suites)
                    .forEach(storySuite => __classPrivateFieldGet(this, _TeamcityReporter_instances, "m", _TeamcityReporter_logSuiteResults).call(this, storySuite));
                break;
        }
        console.info(`Finished the run: ${result.status}`);
    }
    logToTC(action, parts) {
        const textParts = [
            `##teamcity[${action}`,
            ...parts.filter(part => !!part),
            `flowId='${this.flowId}']`
        ];
        console.log(textParts.join(' '));
    }
    // Escape text message to be compatible with Teamcity
    // https://www.jetbrains.com/help/teamcity/2021.2/service-messages.html#Escaped+values
    static escape(text) {
        if (!text) {
            return '';
        }
        /* eslint-disable no-control-regex */
        return text
            .toString()
            .replace(/\x1B.*?m/g, "")
            .replace(/\|/g, "||")
            .replace(/\n/g, "|n")
            .replace(/\r/g, "|r")
            .replace(/\[/g, "|[")
            .replace(/\]/g, "|]")
            .replace(/\u0085/g, "|x")
            .replace(/\u2028/g, "|l")
            .replace(/\u2029/g, "|p")
            .replace(/'/g, "|'");
        /* eslint-enable no-control-regex */
    }
}
_a = TeamcityReporter, _TeamcityReporter_testMetadataArtifacts = new WeakMap(), _TeamcityReporter_config = new WeakMap(), _TeamcityReporter_mode = new WeakMap(), _TeamcityReporter_lastRunningSuite = new WeakMap(), _TeamcityReporter_instances = new WeakSet(), _TeamcityReporter_logSuiteResults = function _TeamcityReporter_logSuiteResults(suite) {
    this.logToTC(`testSuiteStarted`, [
        `name='${TeamcityReporter.escape(suite.title)}'`
    ]);
    suite.tests.forEach((testCase) => __classPrivateFieldGet(this, _TeamcityReporter_instances, "m", _TeamcityReporter_logTestResults).call(this, testCase));
    suite.suites.forEach((suite) => __classPrivateFieldGet(this, _TeamcityReporter_instances, "m", _TeamcityReporter_logSuiteResults).call(this, suite));
    this.logToTC(`testSuiteFinished`, [
        `name='${TeamcityReporter.escape(suite.title)}'`
    ]);
}, _TeamcityReporter_logTestResults = function _TeamcityReporter_logTestResults(test) {
    const title = TeamcityReporter.escape(test.title);
    test.results.forEach((result) => __classPrivateFieldGet(this, _TeamcityReporter_instances, "m", _TeamcityReporter_logResult).call(this, title, result, test.timeout));
}, _TeamcityReporter_logResult = function _TeamcityReporter_logResult(name, result, timeout) {
    const localISOTime = new Date(result?.startTime.getTime() - __classPrivateFieldGet(TeamcityReporter, _a, "f", _TeamcityReporter_TZ_OFFSET))
        .toISOString()
        .slice(0, -1);
    this.logToTC(`testStarted`, [
        `name='${name}'`,
        `timestamp='${localISOTime}'`,
        `captureStandardOutput='true'`
    ]);
    switch (result?.status) {
        case 'skipped':
            this.logToTC(`testIgnored`, [
                `name='${name}'`,
                `message='skipped'`
            ]);
            break;
        case 'timedOut':
            this.logToTC(`testFailed`, [
                `name='${name}'`,
                `message='Timeout of ${timeout}ms exceeded.'`,
                `details='${TeamcityReporter.escape(result?.error?.stack || '')}'`
            ]);
            break;
        case 'failed':
            this.logToTC(`testFailed`, [
                `name='${name}'`,
                `message='${TeamcityReporter.escape(result?.error?.message || '')}'`,
                `details='${TeamcityReporter.escape(result?.error?.stack || '')}'`
            ]);
            break;
        case 'passed':
            break;
        default:
            throw new errors_1.NotImplementedError(`${result?.status} isn't supported`);
    }
    // https://www.jetbrains.com/help/teamcity/service-messages.html#Reporting+Additional+Test+Data
    // 'test-results' should be a part of the artifacts directory
    const artifact = __classPrivateFieldGet(this, _TeamcityReporter_testMetadataArtifacts, "f");
    for (const attachment of (result?.attachments || [])) {
        let value = '';
        if (attachment.path !== undefined) {
            value = attachment.path;
            value = value.split(path.sep).join(path.posix.sep);
            value = value.slice(value.indexOf('test-results') + 13);
            value = `${artifact}${artifact.endsWith('.zip') ? '!' : ''}/${value}`;
        }
        else if (attachment?.body !== undefined) {
            value = attachment?.body?.toString('base64');
        }
        let type;
        switch (attachment.contentType) {
            case 'image/png':
            case `application/zip`:
                type = `type='artifact'`;
                break;
            case `application/json`:
            default:
                type = `type='text'`;
        }
        this.logToTC(`testMetadata`, [
            type,
            `testName='${name}'`,
            `name='${attachment.name}'`,
            `value='${value}'`
        ]);
    }
    this.logToTC(`testFinished`, [
        `name='${name}'`,
        `duration='${result?.duration}'`
    ]);
};
_TeamcityReporter_TZ_OFFSET = { value: (new Date()).getTimezoneOffset() * 60000 }; // offset in milliseconds
exports.default = TeamcityReporter;
//# sourceMappingURL=teamcity.reporter.js.map