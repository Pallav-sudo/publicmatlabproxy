{"version":3,"file":"teamcity.reporter.js","sourceRoot":"","sources":["../../src/teamcity.reporter.ts"],"names":[],"mappings":"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","sourcesContent":["import { Reporter, Suite, FullConfig, TestCase, TestError, TestResult, FullResult } from '@playwright/test/reporter';\nimport * as path from 'path';\n\nimport { NotImplementedError } from './errors';\nimport { ActionType, ITeamcityReporterConfiguration, ReporterMode } from './teamcity.model';\nimport { stringify } from './utils';\n\n// https://www.jetbrains.com/help/teamcity/service-messages.html\nclass TeamcityReporter implements Reporter {\n  static readonly #TZ_OFFSET = (new Date()).getTimezoneOffset() * 60000; // offset in milliseconds\n  readonly #testMetadataArtifacts: string;\n\n  flowId!: string;\n  rootSuite!: Suite;\n\n  #config!: FullConfig;\n  #mode!: ReporterMode;\n  #lastRunningSuite: Suite | undefined;\n\n  constructor(private configuration?: ITeamcityReporterConfiguration) {\n    this.#testMetadataArtifacts = configuration?.testMetadataArtifacts\n      ?? process.env.TEAMCITY_ARTIFACTS_PW_RESULT\n      ?? 'test-results';\n  }\n\n  onBegin(config: FullConfig, suite: Suite) {\n    this.flowId = process.pid.toString();\n    this.#config = config;\n    this.rootSuite = suite;\n\n    if (config.workers === 1) {\n      this.#mode = ReporterMode.Test;\n    } else {\n      console.info('Playwright is running suites in multiple workers. The results will be reported after all of them finish.');\n      this.#mode = ReporterMode.Suite;\n    }\n\n    if (this.configuration?.logConfig) {\n      this.logToTC(`message`, [`text='${TeamcityReporter.escape(stringify(this.#config))}'`]);\n    }\n\n    // https://www.jetbrains.com/help/teamcity/service-messages.html#Enabling+Test+Retry\n    if (this.#config.projects.some(project => project.retries > 0)) {\n      this.logToTC(`testRetrySupport`, [`enabled='true'`]);\n    }\n  }\n\n  onError(error: TestError) {\n    console.error(error);\n  }\n\n  onTestBegin(test: TestCase): void {\n    if (this.#mode === ReporterMode.Test) {\n      let parentSuite = test.parent;\n      while (parentSuite?.parent?.parent !== this.rootSuite && parentSuite.parent) {\n        parentSuite = parentSuite.parent;\n      }\n      if (parentSuite !== this.#lastRunningSuite) {\n        if (this.#lastRunningSuite !== undefined) {\n          this.#logSuiteResults(this.#lastRunningSuite);\n        }\n        this.#lastRunningSuite = parentSuite;\n      }\n    }\n  }\n\n  onEnd(result: FullResult) {\n    switch (this.#mode) {\n      case ReporterMode.Test:\n        if (this.#lastRunningSuite !== undefined) {\n          this.#logSuiteResults(this.#lastRunningSuite);\n        }\n        break;\n      case ReporterMode.Suite:\n      default:\n        // @TODO try this\n        // https://www.jetbrains.com/help/teamcity/2021.2/service-messages.html#Importing+XML+Reports\n        // console.log(`##teamcity[importData type='junit' path='test-results.xml']`);\n        this.rootSuite.suites\n          .flatMap(fileSuite => fileSuite.suites)\n          .forEach(storySuite => this.#logSuiteResults(storySuite));\n        break;\n    }\n    console.info(`Finished the run: ${result.status}`);\n  }\n\n  logToTC(action: ActionType, parts: string[]) {\n    const textParts = [\n      `##teamcity[${action}`,\n      ...parts.filter(part => !!part),\n      `flowId='${this.flowId}']`\n    ];\n    console.log(textParts.join(' '));\n  }\n\n  // Escape text message to be compatible with Teamcity\n  // https://www.jetbrains.com/help/teamcity/2021.2/service-messages.html#Escaped+values\n  public static escape(text: string) {\n    if (!text) {\n      return '';\n    }\n    /* eslint-disable no-control-regex */\n    return text\n      .toString()\n      .replace(/\\x1B.*?m/g, \"\")\n      .replace(/\\|/g, \"||\")\n      .replace(/\\n/g, \"|n\")\n      .replace(/\\r/g, \"|r\")\n      .replace(/\\[/g, \"|[\")\n      .replace(/\\]/g, \"|]\")\n      .replace(/\\u0085/g, \"|x\")\n      .replace(/\\u2028/g, \"|l\")\n      .replace(/\\u2029/g, \"|p\")\n      .replace(/'/g, \"|'\");\n    /* eslint-enable no-control-regex */\n  }\n\n  #logSuiteResults(suite: Suite): void {\n    this.logToTC(`testSuiteStarted`, [\n      `name='${TeamcityReporter.escape(suite.title)}'`\n    ]);\n\n    suite.tests.forEach((testCase: TestCase) => this.#logTestResults(testCase));\n    suite.suites.forEach((suite: Suite) => this.#logSuiteResults(suite));\n\n    this.logToTC(`testSuiteFinished`, [\n      `name='${TeamcityReporter.escape(suite.title)}'`\n    ]);\n  }\n\n  #logTestResults(test: TestCase) {\n    const title = TeamcityReporter.escape(test.title);\n    test.results.forEach((result: TestResult) => this.#logResult(title, result, test.timeout));\n  }\n\n  #logResult(name: string, result: TestResult, timeout: number) {\n    const localISOTime = new Date(result?.startTime.getTime() - TeamcityReporter.#TZ_OFFSET)\n      .toISOString()\n      .slice(0, -1);\n    this.logToTC(`testStarted`, [\n      `name='${name}'`,\n      `timestamp='${localISOTime}'`,\n      `captureStandardOutput='true'`\n    ]);\n\n    switch (result?.status) {\n      case 'skipped':\n        this.logToTC(`testIgnored`, [\n          `name='${name}'`,\n          `message='skipped'`\n        ]);\n        break;\n      case 'timedOut':\n        this.logToTC(`testFailed`, [\n          `name='${name}'`,\n          `message='Timeout of ${timeout}ms exceeded.'`,\n          `details='${TeamcityReporter.escape(result?.error?.stack || '')}'`\n        ]);\n        break;\n      case 'failed':\n        this.logToTC(`testFailed`, [\n          `name='${name}'`,\n          `message='${TeamcityReporter.escape(result?.error?.message || '')}'`,\n          `details='${TeamcityReporter.escape(result?.error?.stack || '')}'`\n        ]);\n        break;\n      case 'passed':\n        break;\n      default:\n        throw new NotImplementedError(`${result?.status as string} isn't supported`);\n    }\n    // https://www.jetbrains.com/help/teamcity/service-messages.html#Reporting+Additional+Test+Data\n    // 'test-results' should be a part of the artifacts directory\n    const artifact = this.#testMetadataArtifacts;\n    for (const attachment of (result?.attachments || [])) {\n      let value = '';\n      if (attachment.path !== undefined) {\n        value = attachment.path;\n        value = value.split(path.sep).join(path.posix.sep);\n        value = value.slice(value.indexOf('test-results') + 13);\n        value = `${artifact}${artifact.endsWith('.zip') ? '!' : ''}/${value}`;\n      } else if (attachment?.body !== undefined) {\n        value = attachment?.body?.toString('base64');\n      }\n      let type!: string;\n      switch (attachment.contentType) {\n        case 'image/png':\n        case `application/zip`:\n          type = `type='artifact'`;\n          break;\n        case `application/json`:\n        default:\n          type = `type='text'`;\n      }\n      this.logToTC(`testMetadata`, [\n        type,\n        `testName='${name}'`,\n        `name='${attachment.name}'`,\n        `value='${value}'`\n      ]);\n    }\n\n    this.logToTC(`testFinished`, [\n      `name='${name}'`,\n      `duration='${result?.duration}'`\n    ]);\n  }\n}\n\nexport default TeamcityReporter;\n"]}